---
- hosts: localhost
  gather_facts: false
  vars_files:
    - vars.yaml

  tasks:
    - name: Setup security groups
      ec2_group:
        name: webserversg
        description: Web server group allowing http and ssh
        region: us-east-2
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

    - name: Provision instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        key_name: "{{ aws_ssh_keypair_name }}"
        group: webserversg
        instance_type: t2.micro
        image: ami-0b9064170e32bde34
        wait: yes
        count: 1
        state: present
        region: us-east-2
        instance_tags:
          Name: webserver
      register: ec2

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: webserver
      loop: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        state: started
      loop: "{{ ec2.instances }}"

- hosts: webserver
  gather_facts: no
  become: true
  vars_files:
    - vars.yaml

  tasks:
  - name: Run apt-get update
    apt: update_cache=yes

  - name: Install aptitude using apt
    apt: name=aptitude state=latest update_cache=yes force_apt_get=yes
    register: apt_status
    until: apt_status is success
    delay: 30
    retries: 10

  - name: Install required system packages
    apt: name={{ item }} state=latest update_cache=yes
    loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Update apt and install docker-ce
    apt: update_cache=yes name=docker-ce state=latest

  - name: Install Docker Module for Python
    pip:
      name: docker

  - name: Launch database container
    docker_container:
      name: "wordpress_mysql"
      image: mysql:5.7
      volumes:
        - "db_data:/var/lib/mysql:rw"
      restart: true
      env:
        MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
        MYSQL_DATABASE: "{{ mysql_db }}"
        MYSQL_USER: "{{ mysql_user }}"
        MYSQL_PASSWORD: "{{ mysql_password }}"

  - name: Install LAMP Packages
    apt: name={{ item }} update_cache=yes state=latest
    loop: [ 'apache2', 'python3-pymysql', 'php', 'php-mysql', 'libapache2-mod-php', 'mysql-client-core-5.7' ]
    tags: [ system ]

  - name: Install PHP Extensions
    apt: name={{ item }} update_cache=yes state=latest
    loop: "{{ php_modules }}"
    tags: [ system ]

# Apache Configuration
  - name: Create document root
    file:
      path: "/var/www/{{ http_host }}"
      state: directory
      owner: "www-data"
      group: "www-data"
      mode: '0755'
    tags: [ apache ]

  - name: Set up Apache VirtualHost
    template:
      src: "files/apache.conf.j2"
      dest: "/etc/apache2/sites-available/{{ http_host }}.conf"
    notify: Reload Apache
    tags: [ apache ]

  - name: Enable rewrite module
    shell: /usr/sbin/a2enmod rewrite
    notify: Reload Apache
    tags: [ apache ]

  - name: Enable new site
    shell: /usr/sbin/a2ensite {{ http_host }}.conf
    notify: Reload Apache
    tags: [ apache ]

  - name: Disable default Apache site
    shell: /usr/sbin/a2dissite 000-default.conf
    notify: Restart Apache
    tags: [ apache ]

# UFW Configuration
  - name: "UFW - Allow HTTP on port 80"
    ufw:
      rule: allow
      port: "80"
      proto: tcp
    tags: [ system ]

# WordPress Configuration
  - name: Download and unpack latest WordPress
    unarchive:
      src: https://wordpress.org/latest.tar.gz
      dest: "/var/www/{{ http_host }}"
      remote_src: yes
      creates: "/var/www/{{ http_host }}/wordpress"
    tags: [ wordpress ]

  - name: Set ownership
    file:
      path: "/var/www/{{ http_host }}"
      state: directory
      recurse: yes
      owner: www-data
      group: www-data
    tags: [ wordpress ]

  - name: Set permissions for directories
    shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type d -exec chmod 750 {} \\;"
    tags: [ wordpress ]

  - name: Set permissions for files
    shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type f -exec chmod 640 {} \\;"
    tags: [ wordpress ]

  - name: Set up wp-config
    template:
      src: "files/wp-config.php.j2"
      dest: "/var/www/{{ http_host }}/wordpress/wp-config.php"
    tags: [ wordpress ]

  - name: Download wp-cli
    get_url:
      url="https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar"
      dest="/usr/bin/wp-cli"
      force_basic_auth=yes
      mode=0755
    tags: [ wordpress ]

  - name: Finalize Wordpress install
    shell: "/usr/bin/wp-cli core install --path=/var/www/{{ http_host }}/wordpress/ --url={{ http_host }} --title=Cleo --admin_user={{ wp_admin_user }} --admin_password={{ wp_admin_password }} --admin_email={{ wp_admin_email }} --skip-email"
    become_user: www-data
    tags: [ wordpress ]

  - name: Install script to post to Wordpress
    template:
      src: "files/postweathertowordpress.py"
      dest: "/home/ubuntu/postweathertowordpress.py"
      mode: 0700
    tags: [ wordpress ]

  - name: Install WP XMLRPC library for Python
    pip:
      name: python-wordpress-xmlrpc
    tags: [ wordpress ]

  - name: Force run handlers to get Apache restarted
    meta: flush_handlers

  - name: Post weather
    shell: "/usr/bin/python3 /home/ubuntu/postweathertowordpress.py"

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted

